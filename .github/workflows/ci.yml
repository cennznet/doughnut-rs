name: CI
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  # push:
  #   branches: [main]
  pull_request:
    branches:
      - main
env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: test ${{ matrix.rust }} ${{ matrix.flags }}
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        rust: ["stable", "1.73"]
        flags: ["--all-features"]
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
      - uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true
      - name: test
        run: cargo test ${{ matrix.flags }}

  js-wasm-build-test:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4
      - name: check files
        run: ls -la
        working-directory: js
      - uses: dtolnay/rust-toolchain@1.73
        with:
          toolchain: nightly-x86_64-unknown-linux-gnu
          target: wasm32-unknown-unknown
      - uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true
      - name: cargo check wasm in js directory
        run: cd ./js && cargo check --target wasm32-unknown-unknown
      - name: Install Node.js LTS
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          cache: 'yarn'
          cache-dependency-path: js/yarn.lock
      - name: Install JS deps
        run: yarn install --frozen-lockfile
        working-directory: js
      - name: Install wasm-pack
        run: yarn global add wasm-pack
      - name: Build JS wasm library using wasm-pack
        run: yarn build
        working-directory: js
      - name: Test JS wasm library
        run: yarn test
        working-directory: js

  # clippy:
  #   runs-on: ubuntu-latest
  #   timeout-minutes: 30
  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: dtolnay/rust-toolchain@1.73
  #       with:
  #         components: clippy
  #     - uses: Swatinem/rust-cache@v2
  #       with:
  #         cache-on-failure: true
  #     - run: cargo clippy --workspace --all-targets --all-features
  #       env:
  #         RUSTFLAGS: -Dwarnings

  fmt:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@1.73
        with:
          components: rustfmt
      - run: cargo fmt --all --check
