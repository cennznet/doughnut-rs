// Copyright 2019 Centrality Investments Limited

#![cfg(test)]

use alloc::vec::Vec;

use crate::doughnut::Doughnut;
use crate::traits::DoughnutApi;
use crate::v0::{parity, DoughnutV0};
use codec::{Decode, Encode};
use core::convert::TryFrom;
use parity::DoughnutV0 as ParityDoughnutV0;

#[test]
fn it_works_v0() {
    let payload: Vec<u8> = vec![
        0, 0, 64, 22, 126, 150, 15, 176, 190, 210, 156, 179, 149, 142, 84, 153, 4, 203, 61, 62,
        185, 76, 45, 162, 220, 254, 188, 163, 187, 63, 39, 186, 113, 126, 12, 60, 121, 179, 67,
        105, 121, 244, 39, 137, 174, 55, 85, 167, 73, 111, 50, 249, 10, 145, 141, 125, 105, 138,
        38, 93, 144, 45, 224, 70, 206, 246, 116, 196, 94, 16, 0, 115, 111, 109, 101, 116, 104, 105,
        110, 103, 0, 0, 0, 0, 0, 0, 0, 128, 0, 115, 111, 109, 101, 116, 104, 105, 110, 103, 69,
        108, 115, 101, 0, 0, 0, 128, 0, 0, 0, 8, 185, 184, 138, 72, 86, 187, 125, 166, 109, 176,
        31, 104, 162, 235, 78, 157, 166, 8, 137, 191, 33, 202, 128, 138, 165, 73, 244, 67, 247, 37,
        13, 218, 44, 244, 54, 137, 179, 56, 110, 152, 170, 180, 218, 107, 177, 170, 58, 91, 62, 24,
        240, 248, 244, 13, 51, 235, 3, 21, 63, 79, 192, 137, 6,
    ];
    let d = DoughnutV0::new(&payload).expect("It works");

    assert_eq!(d.signature_version(), 0);
    assert_eq!(d.payload_version(), 0);
    assert_eq!(d.expiry(), 555_555);
    assert_eq!(d.not_before(), 0);
    assert_eq!(
        d.issuer().as_ref(),
        [
            22, 126, 150, 15, 176, 190, 210, 156, 179, 149, 142, 84, 153, 4, 203, 61, 62, 185, 76,
            45, 162, 220, 254, 188, 163, 187, 63, 39, 186, 113, 126, 12
        ]
    );
    assert_eq!(
        d.holder().as_ref(),
        [
            60, 121, 179, 67, 105, 121, 244, 39, 137, 174, 55, 85, 167, 73, 111, 50, 249, 10, 145,
            141, 125, 105, 138, 38, 93, 144, 45, 224, 70, 206, 246, 116
        ]
    );
    assert_eq!(d.get_domain("something"), Some(&[0_u8][..]));
    assert_eq!(d.get_domain("somethingElse"), Some(&[0_u8][..]));

    assert_eq!(
        d.signature().to_vec(),
        payload[(payload.len() - 64) as usize..].to_vec()
    );

    assert_eq!(d.encode(), payload);
}

#[test]
fn it_works_v0_parity() {
    let payload: Vec<u8> = vec![
        // version and domain count
        2, 24, 2, // holder and issuer
        22, 126, 150, 15, 176, 190, 210, 156, 179, 149, 142, 84, 153, 4, 203, 61, 62, 185, 76, 45,
        162, 220, 254, 188, 163, 187, 63, 39, 186, 113, 126, 12, 60, 121, 179, 67, 105, 121, 244,
        39, 137, 174, 55, 85, 167, 73, 111, 50, 249, 10, 145, 141, 125, 105, 138, 38, 93, 144, 45,
        224, 70, 206, 246, 116, // expiry
        35, 122, 8, 0, // Domain 1 header
        115, 111, 109, 101, 116, 104, 105, 110, 103, 0, 0, 0, 0, 0, 0, 0, 1, 0,
        // Domain 2 header
        115, 111, 109, 101, 116, 104, 105, 110, 103, 69, 108, 115, 101, 0, 0, 0, 1, 0,
        // Domain data
        0, 0, // signature
        8, 185, 184, 138, 72, 86, 187, 125, 166, 109, 176, 31, 104, 162, 235, 78, 157, 166, 8, 137,
        191, 33, 202, 128, 138, 165, 73, 244, 67, 247, 37, 13, 218, 44, 244, 54, 137, 179, 56, 110,
        152, 170, 180, 218, 107, 177, 170, 58, 91, 62, 24, 240, 248, 244, 13, 51, 235, 3, 21, 63,
        79, 192, 137, 6,
    ];

    let d = ParityDoughnutV0::decode(&mut &payload[..]).expect("It works");

    assert_eq!(d.signature_version, 3);
    assert_eq!(d.payload_version, 2);
    assert_eq!(d.expiry, 555_555);
    assert_eq!(d.not_before, 0);
    assert_eq!(
        d.issuer().as_ref(),
        [
            22, 126, 150, 15, 176, 190, 210, 156, 179, 149, 142, 84, 153, 4, 203, 61, 62, 185, 76,
            45, 162, 220, 254, 188, 163, 187, 63, 39, 186, 113, 126, 12
        ]
    );
    assert_eq!(
        d.holder().as_ref(),
        [
            60, 121, 179, 67, 105, 121, 244, 39, 137, 174, 55, 85, 167, 73, 111, 50, 249, 10, 145,
            141, 125, 105, 138, 38, 93, 144, 45, 224, 70, 206, 246, 116
        ]
    );
    assert_eq!(d.get_domain("something"), Some(&[0_u8][..]));
    assert_eq!(d.get_domain("somethingElse"), Some(&[0_u8][..]));
    assert_eq!(&d.signature[..], &payload[(payload.len() - 64) as usize..],);
    assert_eq!(d.encode(), payload);
}

#[test]
fn v0_parity_encode_two_domains() {
    let payload: Vec<u8> = vec![
        // version and domain count
        0, 0, 2, // holder and issuer
        22, 126, 150, 15, 176, 190, 210, 156, 179, 149, 142, 84, 153, 4, 203, 61, 62, 185, 76, 45,
        162, 220, 254, 188, 163, 187, 63, 39, 186, 113, 126, 12, 60, 121, 179, 67, 105, 121, 244,
        39, 137, 174, 55, 85, 167, 73, 111, 50, 249, 10, 145, 141, 125, 105, 138, 38, 93, 144, 45,
        224, 70, 206, 246, 116, // expiry
        35, 122, 8, 0, // Domain 1 header
        115, 111, 109, 101, 116, 104, 105, 110, 103, 0, 0, 0, 0, 0, 0, 0, 1, 0,
        // Domain 2 header
        115, 111, 109, 101, 116, 104, 105, 110, 103, 69, 108, 115, 101, 0, 0, 0, 1, 0,
        // Domain data
        0, 0, // signature
        8, 185, 184, 138, 72, 86, 187, 125, 166, 109, 176, 31, 104, 162, 235, 78, 157, 166, 8, 137,
        191, 33, 202, 128, 138, 165, 73, 244, 67, 247, 37, 13, 218, 44, 244, 54, 137, 179, 56, 110,
        152, 170, 180, 218, 107, 177, 170, 58, 91, 62, 24, 240, 248, 244, 13, 51, 235, 3, 21, 63,
        79, 192, 137, 6,
    ];

    let d = ParityDoughnutV0::decode(&mut &payload[..]).expect("It works");

    let encoded = d.encode();
    assert_eq!(encoded, payload);
}

#[test]
fn v0_parity_encode_one_domain() {
    let payload: Vec<u8> = vec![
        // version and domain count
        0, 0, 0, // holder and issuer
        22, 126, 150, 15, 176, 190, 210, 156, 179, 149, 142, 84, 153, 4, 203, 61, 62, 185, 76, 45,
        162, 220, 254, 188, 163, 187, 63, 39, 186, 113, 126, 12, 60, 121, 179, 67, 105, 121, 244,
        39, 137, 174, 55, 85, 167, 73, 111, 50, 249, 10, 145, 141, 125, 105, 138, 38, 93, 144, 45,
        224, 70, 206, 246, 116, // expiry
        35, 122, 8, 0, // Domain 1 header
        115, 111, 109, 101, 116, 104, 105, 110, 103, 0, 0, 0, 0, 0, 0, 0, 1, 0,
        // Domain data
        0, // signature
        8, 185, 184, 138, 72, 86, 187, 125, 166, 109, 176, 31, 104, 162, 235, 78, 157, 166, 8, 137,
        191, 33, 202, 128, 138, 165, 73, 244, 67, 247, 37, 13, 218, 44, 244, 54, 137, 179, 56, 110,
        152, 170, 180, 218, 107, 177, 170, 58, 91, 62, 24, 240, 248, 244, 13, 51, 235, 3, 21, 63,
        79, 192, 137, 6,
    ];
    let d = ParityDoughnutV0::decode(&mut &payload[..]).expect("It works");

    let encoded = d.encode();
    assert_eq!(encoded, payload);
}

#[test]
fn it_works_v0_parity_ed25519() {
    let payload: Vec<u8> = vec![
        // version and domain count
        0, 8, 0, // holder and issuer
        22, 126, 150, 15, 176, 190, 210, 156, 179, 149, 142, 84, 153, 4, 203, 61, 62, 185, 76, 45,
        162, 220, 254, 188, 163, 187, 63, 39, 186, 113, 126, 12, 60, 121, 179, 67, 105, 121, 244,
        39, 137, 174, 55, 85, 167, 73, 111, 50, 249, 10, 145, 141, 125, 105, 138, 38, 93, 144, 45,
        224, 70, 206, 246, 116, // expiry
        35, 122, 8, 0, // Domain 1 header
        115, 111, 109, 101, 116, 104, 105, 110, 103, 0, 0, 0, 0, 0, 0, 0, 1, 0,
        // Domain data
        0, // signature
        8, 185, 184, 138, 72, 86, 187, 125, 166, 109, 176, 31, 104, 162, 235, 78, 157, 166, 8, 137,
        191, 33, 202, 128, 138, 165, 73, 244, 67, 247, 37, 13, 218, 44, 244, 54, 137, 179, 56, 110,
        152, 170, 180, 218, 107, 177, 170, 58, 91, 62, 24, 240, 248, 244, 13, 51, 235, 3, 21, 63,
        79, 192, 137, 6,
    ];
    let d = ParityDoughnutV0::decode(&mut &payload[..]).expect("It works");
    assert_eq!(d.signature_version(), 1);
    assert_eq!(d.payload(), &payload[..payload.len() - 64]);
}

#[test]
fn it_works_doughnut_enum_v0_parity() {
    let payload: Vec<u8> = vec![
        // version and domain count
        0, 24, 0, // holder and issuer
        22, 126, 150, 15, 176, 190, 210, 156, 179, 149, 142, 84, 153, 4, 203, 61, 62, 185, 76, 45,
        162, 220, 254, 188, 163, 187, 63, 39, 186, 113, 126, 12, 60, 121, 179, 67, 105, 121, 244,
        39, 137, 174, 55, 85, 167, 73, 111, 50, 249, 10, 145, 141, 125, 105, 138, 38, 93, 144, 45,
        224, 70, 206, 246, 116, // expiry
        35, 122, 8, 0, // Domain 1 header
        115, 111, 109, 101, 116, 104, 105, 110, 103, 0, 0, 0, 0, 0, 0, 0, 1, 0,
        // Domain data
        0, // signature
        8, 185, 184, 138, 72, 86, 187, 125, 166, 109, 176, 31, 104, 162, 235, 78, 157, 166, 8, 137,
        191, 33, 202, 128, 138, 165, 73, 244, 67, 247, 37, 13, 218, 44, 244, 54, 137, 179, 56, 110,
        152, 170, 180, 218, 107, 177, 170, 58, 91, 62, 24, 240, 248, 244, 13, 51, 235, 3, 21, 63,
        79, 192, 137, 6,
    ];
    let doughnut = Doughnut::decode(&mut &payload[..]).expect("It works");
    let d = ParityDoughnutV0::try_from(doughnut.clone()).unwrap();

    assert_eq!(d.signature_version, 3);
    assert_eq!(d.payload_version, 0);
    assert_eq!(d.expiry, 555_555);
    assert_eq!(d.not_before, 0);
    assert_eq!(doughnut.encode(), payload);
}
